services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres-db
    environment:
      POSTGRES_DB: ai-agent-db
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
    ports:
      - "5432:5432"
    networks:
      - spring-ai-network

  spring-ai-agent:
    image: spring-ai-agent:0.0.1-SNAPSHOT
    container_name: spring-ai-app
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ai-agent-db
      SPRING_DATASOURCE_USERNAME: chatuser
      SPRING_DATASOURCE_PASSWORD: chatpass
    networks:
      - spring-ai-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - prometheus:/prometheus
      - ./thirdparty-configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - spring-ai-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./thirdparty-configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./thirdparty-configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./thirdparty-configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./thirdparty-configs/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    depends_on:
      - prometheus
    networks:
      - spring-ai-network

  tempo-init:
    # Tempo runs as user 10001, and docker compose creates the volume as root.
    # As such, we need to chown the volume in order for Tempo to start correctly.
    # This should not be needed but this is the official solution recommended by Tempo maintainers
    # See: https://github.com/grafana/tempo/blob/a21001a72a5865bfcfc1b0d2dfa30160c5a26103/example/docker-compose/local/docker-compose.yaml
    # See: https://github.com/grafana/tempo/issues/1657
    image: &tempoImage grafana/tempo:2.5.0 # https://hub.docker.com/r/grafana/tempo/tags and https://github.com/grafana/tempo/releases
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo:/var/tempo

  tempo:
    container_name: tempo
    image: *tempoImage
    command: ['-config.file=/etc/tempo.yml']
    depends_on: ['tempo-init']
    volumes:
      - tempo:/var/tempo
      - ./thirdparty-configs/tempo/tempo.yml:/etc/tempo.yml:ro
    ports:
      - "3200:3200"    # tempo
      - "9411:9411"    # zipkin
    networks:
      - spring-ai-network

  loki:
    container_name: loki
    image: grafana/loki:3.0.1 # https://hub.docker.com/r/grafana/loki/tags and https://github.com/grafana/loki/releases
    command: ['-config.file=/etc/loki/local-config.yaml']
    ports:
      - "3100:3100"
    networks:
      - spring-ai-network

volumes:
  prometheus:
    driver: local
  tempo:
    driver: local

networks:
  spring-ai-network: